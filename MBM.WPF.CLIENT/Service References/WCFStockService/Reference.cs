//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MBM.WPF.CLIENT.WCFStockService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCFStockService.IStockService")]
    public interface IStockService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/AddStockEntry", ReplyAction="http://tempuri.org/IStockService/AddStockEntryResponse")]
        string AddStockEntry(MBM.BL.StockEntry stock);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/AddStockEntry", ReplyAction="http://tempuri.org/IStockService/AddStockEntryResponse")]
        System.Threading.Tasks.Task<string> AddStockEntryAsync(MBM.BL.StockEntry stock);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/GetStockEntry", ReplyAction="http://tempuri.org/IStockService/GetStockEntryResponse")]
        MBM.BL.StockEntry GetStockEntry(uint id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/GetStockEntry", ReplyAction="http://tempuri.org/IStockService/GetStockEntryResponse")]
        System.Threading.Tasks.Task<MBM.BL.StockEntry> GetStockEntryAsync(uint id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/GetStockEntries", ReplyAction="http://tempuri.org/IStockService/GetStockEntriesResponse")]
        MBM.BL.StockEntry[] GetStockEntries(MBM.BL.Filter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/GetStockEntries", ReplyAction="http://tempuri.org/IStockService/GetStockEntriesResponse")]
        System.Threading.Tasks.Task<MBM.BL.StockEntry[]> GetStockEntriesAsync(MBM.BL.Filter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/UpdateStockEntry", ReplyAction="http://tempuri.org/IStockService/UpdateStockEntryResponse")]
        string UpdateStockEntry(MBM.BL.StockEntry stock);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/UpdateStockEntry", ReplyAction="http://tempuri.org/IStockService/UpdateStockEntryResponse")]
        System.Threading.Tasks.Task<string> UpdateStockEntryAsync(MBM.BL.StockEntry stock);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/DeleteStock", ReplyAction="http://tempuri.org/IStockService/DeleteStockResponse")]
        string DeleteStock(uint id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/DeleteStock", ReplyAction="http://tempuri.org/IStockService/DeleteStockResponse")]
        System.Threading.Tasks.Task<string> DeleteStockAsync(uint id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStockServiceChannel : MBM.WPF.CLIENT.WCFStockService.IStockService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StockServiceClient : System.ServiceModel.ClientBase<MBM.WPF.CLIENT.WCFStockService.IStockService>, MBM.WPF.CLIENT.WCFStockService.IStockService {
        
        public StockServiceClient() {
        }
        
        public StockServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public StockServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StockServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StockServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string AddStockEntry(MBM.BL.StockEntry stock) {
            return base.Channel.AddStockEntry(stock);
        }
        
        public System.Threading.Tasks.Task<string> AddStockEntryAsync(MBM.BL.StockEntry stock) {
            return base.Channel.AddStockEntryAsync(stock);
        }
        
        public MBM.BL.StockEntry GetStockEntry(uint id) {
            return base.Channel.GetStockEntry(id);
        }
        
        public System.Threading.Tasks.Task<MBM.BL.StockEntry> GetStockEntryAsync(uint id) {
            return base.Channel.GetStockEntryAsync(id);
        }
        
        public MBM.BL.StockEntry[] GetStockEntries(MBM.BL.Filter filter) {
            return base.Channel.GetStockEntries(filter);
        }
        
        public System.Threading.Tasks.Task<MBM.BL.StockEntry[]> GetStockEntriesAsync(MBM.BL.Filter filter) {
            return base.Channel.GetStockEntriesAsync(filter);
        }
        
        public string UpdateStockEntry(MBM.BL.StockEntry stock) {
            return base.Channel.UpdateStockEntry(stock);
        }
        
        public System.Threading.Tasks.Task<string> UpdateStockEntryAsync(MBM.BL.StockEntry stock) {
            return base.Channel.UpdateStockEntryAsync(stock);
        }
        
        public string DeleteStock(uint id) {
            return base.Channel.DeleteStock(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteStockAsync(uint id) {
            return base.Channel.DeleteStockAsync(id);
        }
    }
}
